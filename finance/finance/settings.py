"""
Django settings for finance project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from pathlib import Path
import os
from celery.schedules import crontab
from datetime import datetime, timedelta
from pytz import timezone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

PRODUCTION= os.environ.get('PRODUCTION', False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dmt6@sh0r&g5k%xb$#-)=lc+fu==*7v3))93&z$^^%s6tu-$v)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'django_bootstrap_breadcrumbs',
    'rest_framework',
    'rest_framework.authtoken',
    'captcha',
    'home',
    'utils',
    'users',
    'chains',
    'markets',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.middleware.ExtendUserSession',
]

ROOT_URLCONF = 'finance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, '_templates') ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'utils.context_processors.userProfile',
                'utils.context_processors.getHost',                
            ],
        },
    },
]

WSGI_APPLICATION = 'finance.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'finance',
        'CLIENT': {
            'host': ['financemongodb1'] #, 'financemongodb2', 'financemongodb3'], 
            #'REPLICASET': 'rsfinance'
        }
    }
}

MONGODB = {
    'default': {
        'NAME': 'finance', # Default database to connect to
        'LOCATION': [ # An array of host strings, similar to the CACHES setting.
            'financemongodb1:27017',
            #'financemongodb2:27017',
            #'financemongodb3:27017',
        ]
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTHENTICATION_BACKENDS = {
    'django.contrib.auth.backends.ModelBackend'
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "_static"),
    '/assets',
]

MEDIA_URL = '/assets/'
MEDIA_ROOT = '/assets/'

# Url settings
LOGIN_URL = '/'
LOGINAS_REDIRECT_URL = "/"
LOGINAS_LOGOUT_REDIRECT_URL = "/"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5

}

# CSRF settings
CSRF_COOKIE_PATH = '/'

# Host settings
HOST = os.environ.get('HOST', 'localhost')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')

# Redis settings
REDIS_HOST = 'redis://financeredis:6379'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://financeredis:6379/1", # use database #1 (.e.g., docker-compose exec redis redis-cli -n 1)
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Celery settings
def get_utc_intervals(intervals, tzstr):
    tz_now = datetime.now(tz=timezone(tzstr))
    utc_intervals = []
    for interval in intervals:
        utc_hours=[]
        for hour in interval:
            tz_fix = tz_now.replace(hour=hour, minute=0, second=0, microsecond=0)
            utc_fix = tz_fix.astimezone(timezone('UTC'))
            utc_hours.append(str(utc_fix.hour))
        utc_intervals.append("-".join(utc_hours))
    return ",".join(utc_intervals)

CELERY_BROKER_URL = REDIS_HOST 
CELERY_RESULT_BACKEND = REDIS_HOST
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_BEAT_SCHEDULE = {
    # 'update-cme': { 
    #      'task': 'tasks.cme.update_cme', 
    #      'schedule': crontab(minute='*/15', hour=get_utc_intervals([[16,18]], 'America/Chicago'), day_of_week='1,2,3,4,5'),
    # }, 
    'update-cboe': { 
         'task': 'tasks.cboe.update_cboe', 
         'schedule': crontab(minute='*/15', hour=get_utc_intervals([[8,14]], 'America/Chicago'), day_of_week='1,2,3,4,5'),
    },     
    'update-eurex': { 
         'task': 'tasks.eurex.update_eurex', 
         'schedule': crontab(minute='*/15', hour=get_utc_intervals([[9,19]], 'Europe/Berlin'), day_of_week='1,2,3,4,5'),
    },
    'update-history': { 
         'task': 'tasks.history.update_history', 
         'schedule': crontab(minute=0, hour='20', day_of_week='1,2,3,4,5'),
    },            
}

CELERY_IMPORTS = (
    'tasks.cme',
    'tasks.cboe',
    'tasks.eurex',
    'tasks.history',
)
